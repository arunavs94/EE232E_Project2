# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
############################### Part a ###############################
# generate graph from 1a
num_nodes <- 1000
g1 <- erdos.renyi.game(n = num_nodes, p = 0.01)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_nodes, output.walk.path = TRUE) # get vertex sequence of random walk
dim(w_mat)
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# Homework 2 Question 3
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
############################### Part a ###############################
# generate graph from 1a
num_nodes <- 1000
num_steps <- 30
g1 <- erdos.renyi.game(n = num_nodes, p = 0.01)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
random_network = random.graph.game(n = 1000, p = 0.01, directed = FALSE)
vertex_sequence = netrw(random_network, walker.num = 1000, damping = 1, T = 1000, output.walk.path = TRUE) # get vertex sequence of random walk
network_degree = degree(random_network)
visit_probability = vertex_sequence$ave.visit.prob
relationship = cor(network_degree, visit_probability)
cat("Correlation between degree and visit probability: ", relationship)
plot_data = rbind(network_degree, visit_probability)
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# Homework 2 Question 3
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
############################### Part a ###############################
# generate graph from 1a
num_nodes <- 1000
num_steps <- 30
g1 <- erdos.renyi.game(n = num_nodes, p = 0.01)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g1_degree = order
g1_degree = degree(g1)
plot(g1_degree,visit_probability,type = "o")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
closeAllConnections()
rm(list=ls())
library("igraph")
library("netrw")
num_nodes <- 1000
num_steps <- 30
g1 <- erdos.renyi.game(n = num_nodes, p = 0.01)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g1_degree = degree(g1)
plot(g1_degree,visit_probability,type = "o")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
plot(g1_degree,visit_probability)
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
abline(lm(g1_degree~visit_probability),col="red")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
plot(g1_degree,visit_probability)
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q1.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
lm(g1_degree ~ visit_probability)
abline(2,7119)
abline(2,.7)
abline(1,1)
plot(1,1)
abline(1,1)
help abline
plot(1~1)
plot(1~1,type="b")
plot(1~1,type="b")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
plot(g1_degree,visit_probability, main = "Visit Probability for Undirected Graph", xlab = "Degree", ylab = "Visiting Probability")
plot(g1_degree,visit_probability, main = "Visit Probability for Directed Graph", xlab = "Degree", ylab = "Visiting Probability"))
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q1.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
version
num_nodes <- 1000
num_steps <- 1000
g1 <-random.graph.game(n = num_nodes, p = 0.01 , directred = TRUE)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g1_degree = degree(g1,mode = "in")
plot(g1_degree,visit_probability, main = "Visit Probability for Directed Graph", xlab = "Degree", ylab = "Visiting Probability")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
library("netrw", lib.loc="~/R/win-library/2.15")
library("igraph", lib.loc="~/R/win-library/2.15")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
num_nodes <- 1000
num_steps <- 1000
g3 <-random.graph.game(n = num_nodes, p = 0.01 , directred = FALSE)
w_mat = netrw(g3, walker.num = num_nodes, damping = 0.85, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g3_degree = degree(g3,mode)
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q1.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
sum(page_rank)
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
plot(c(0,0),c(1,1))
plot(c(0,0),c(1,1),type="b")
plot(c(0,1),c(0,1),type="b")
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
plot(g1_degree,visit_probability, main = "Visit Probability for Undirected Graph", xlab = "Degree", ylab = "Visiting Probability", ylim = c(0,.0025))
plot(g1_degree,visit_probability, main = "Visit Probability for Undirected Graph with Teleportation (damping = 0.85)", xlab = "Degree", ylab = "Visiting Probability", ylim = c(0,.0025) )
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# Homework 2 Question 3
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
############################### Part a ###############################
# generate graph from 1a
num_nodes <- 1000
num_steps <- 1000
g1 <- erdos.renyi.game(n = num_nodes, p = 0.01 , directed = FALSE)
w_mat = netrw(g1, walker.num = num_nodes, damping = 1, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g1_degree = degree(g1)
plot(g1_degree,visit_probability, main = "Visit Probability for Undirected Graph", xlab = "Degree", ylab = "Visiting Probability", ylim = c(0,.0025))
w_mat = netrw(g1, walker.num = num_nodes, damping = .85, T = num_steps, output.walk.path = TRUE) # get vertex sequence of random walk
visit_probability = w_mat$ave.visit.prob
g1_degree = degree(g1)
plot(g1_degree,visit_probability, main = "Visit Probability for Undirected Graph with Teleportation (damping = 0.85)", xlab = "Degree", ylab = "Visiting Probability", ylim = c(0,.0025) )
source('C:/Users/Steven/Desktop/EE232E-HW2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q3.R')
source('C:/Users/Steven/Desktop/EE232E-HW2/Q2.R')
graph_data = read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read sorted directed network
library(igraph)
library(netrw)
graph_data = read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read sorted directed network
library(igraph)
library(netrw)
graph_data = read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read sorted directed network
ver
version
graph_data = read.table("sorted_directed_net.txt") #, sep = "\t", header = FALSE) # read sorted directed network
library("igraph")
graph_data <- read.table("sorted_directed_net
graph_data <- read.table("sorted_directed_net
graph_data <- read.table("sorted_directed_net
graph_data <- read.table("sorted_directed_net
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
####################  QUESTION 1 ####################
graph_data <- read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read text file
colnames(graph_data) <- c("Node 1", "Node 2", "weights")
g1 <- graph.data.frame(graph_data,directed = TRUE) # covert table to directed garph
connectivity <- is.connected(g1) #check if network is connected
# This code is programmed in R v2.15.2.with iGraph v0.7.0 and netrw v0.2.6
# clearing workspace
closeAllConnections()
rm(list=ls())
# Load libraries
library("igraph")
library("netrw")
####################  QUESTION 1 ####################
graph_data <- read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read text file
colnames(graph_data) <- c("Node 1", "Node 2", "weights")
g1 <- graph.data.frame(graph_data,directed = TRUE) # covert table to directed garph
closeAllConnections()
rm(list=ls())
library("igraph")
library("netrw")
graph_data <- read.table("sorted_directed_net.txt", sep = "\t", header = FALSE) # read text file
source('C:/Users/Steven/Desktop/EE232E_HW3/HW3.R')
version
setwd("C:/Users/Steven/Desktop/EE232E_Project2")
# EE232E Project 2 Question 4
# clearing workspace
closeAllConnections()
rm(list=ls())
library('igraph')
library('readr')
# read in movies  col_names = paste0("V",seq_len(3)), delim = "\t",quote = "\"",)
movie_genre = read.delim("data_files/movie_genre.txt" ,header = FALSE,stringsAsFactors = FALSE)
movie_genre$V2 = NULL
colnames(movie_genre) = c("movie","genre")
genre.table = data.frame(unique(movie_genre$genre)) #create table mapping genre to a specific index
colnames(genre.table) = "idx"
Graph.data = read.delim("data_files/node_list4_smovies.txt",sep = ",",header=FALSE,stringsAsFactors = FALSE)
colnames(Graph.data) = c("Node 1", "Node 2", "weights")
g1 = graph.data.frame(Graph.data,directed = FALSE)
g1_simple = simplify(g1,remove.loops = FALSE,edge.attr.comb = "first") #remove multiple edges
comm_struct = fastgreedy.community(g1_simple, weights = E(g1_simple)$weights)
memberships = comm_struct$membership # 35213 nodes
num_coms = length(unique(memberships)) # 297
nodes = V(g1_simple) # all nodes in the graph
i = 1
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
comm_genres = numeric()
comm_movies
test = vector(movie_genre$movie)
test = as.vector(movie_genre)
test
rm(test)
test = as.vector(movie_genre$movie)
match
help match
help(match)
A = c(1,1,2,4,5,7)
B = C(1,4,7)
B = c(1,4,7)
match(B,a)
match(B,A)
B = c(1,4,7,9)
match(B,A)
match(B,A,nomatch = numeric(0))
match(B,A,nomatch = [])
match(B,A,nomatch = 0)
steven = match(B,A,nomatch = 0)
steven[which(steven == 1)] =[]
steven = match(B,A,nomatch = NULL)
steven
steven = match(B,A,nomatch = 0)
steven[which(steven == 1)] = NULL
length(comm_movies)
length(comm_movies[1:10])
match(sub("\\s+$", "", comm_movies[j])),test,nomatch = 0 )
match(sub("\\s+$", "", comm_movies[j]) , test ,nomatch = 0 )
match(sub("\\s+$", "", comm_movies[1:10]) , test ,nomatch = 0 )
A=match(sub("\\s+$", "", comm_movies[1:10]) , test ,nomatch = 0 )
movie_genre@genre[A]
movie_genre$genre[A]
movies = as.vector(movie_genre$movie)
length(movies)
View(movie_genre)
comm_genres = movie_genre$genre[match( sub("\\s+$", "", comm_movies[1:10]), movies , nomatch = 0 )]
comm_genres
matches = match( sub("\\s+$", "", comm_movies[1:10]), movies , nomatch = 0 )
matches
test = c(1,0,3,4,6,0)
test = test[which(test != 0)]
test
comm_genres
genre_master = as.vector(unique(movie_genre$genre)) #create vector mapping genre to a specific index
genre_master
genre_match = match(comm_genres,genre_master)
genre_match
length(genre_match)
comm_geners
comm_geners
comm_genres
genre_idx = match(comm_genres,genre_master) #get master idx of each genre in community i
thresh = length(genre_idx)*0.2
thresh
test = table(genre_idx)
test
which(test >= thresh)
A=which(test >= thresh)
A[1]
list(A)
unlist(list(A))
A
test
A=which(test >= thresh)
genre_master[A]
A
genre_master[1]
A[1,]
A[[,]]
A[[,1]]
names(A)
as.numeric(names(A))
genre_master(as.numeric(names(A)))
genre_master[as.numeric(names(A))]
comm_genres
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies[1:10]), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(genre_idx)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) #which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))]
comm_20_genres
comm_genres
genre_idx
thresh
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies[1:10]), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) #which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))]
comm_20_genres
cat(comm_20_genres)
cat('   Community', i, 'genres  :',comm_20_genres)
cat('   Community', i, 'genres: ',comm_20_genres)
cat('Analyzing Community', i , 'of', num_coms)
# get all movies in community i
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies[1:10]), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) #which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))]
cat('     Community', i, 'genres: ',comm_20_genres)
cat('Analyzing Community', i , 'of', num_coms)
# get all movies in community i
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) #which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))]
cat('     Community', i, 'genres: ',comm_20_ge
cat('Analyzing Community', i , 'of', num_coms)
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
matches = match( sub("\\s+$", "", comm_movies), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) # which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))] # convert idx back to actual genre names
cat('     Community', i, 'genres: ',comm_20_genres)
source('C:/Users/Steven/Desktop/EE232E_Project2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E_Project2/Q4.R')
test = data.frame()
test$comm = 1
test = data.frame("comm_idx","genres")
test$comm_idx[1] = 1
test$comm_idx[2] = 2
View(test)
comm_20_genres
rbind(comm_20_genres,comm_20_genres[1:2])
rbind(comm_20_genres,comm_20_genres)
comm_20_genres[[i]]= c("steven","leung")
comm_20_genres[[1]]= c("steven","leung")
test[[1]] = c('steven','leung')
A = c(1,2,4,5)
B = list(A,c(1,2))
B
B = list(B,c(1))
B
rm(B)
B = list(B,c(1,3))
B = numeric
B = list(B,c(1,3))
B
B = NULL
B
B = list(B,c(1,3))
B
i  =7
cat('Analyzing Community', i , 'of', num_coms,'\n')
# get all movies in community i
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) # which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))] # convert idx back to actual genre names
cat('     Community', i, 'genres: ',comm_20_genres,'\n')
comm_20_genres
ps_thresh
length(comm_20_genres)
cat('Analyzing Community', i , 'of', num_coms,'\n')
# get all movies in community i
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) # which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))] # convert idx back to actual genre names
if(length(comm_20_genres) == 0){
comm_20_genres = "NONE"
}
cat('     Community', i, 'genres: ',comm_20_genres,'\n')
cat('Analyzing Community', i , 'of', num_coms,'\n')
# get all movies in community i
idx = which(memberships == i) # indicies of nodes in community i
comm_movies = V(g1_simple)$name[idx]
# get all genres of movies in community i
matches = match( sub("\\s+$", "", comm_movies), movies , nomatch = 0 )
matches = matches[ which(matches != 0)]
comm_genres = movie_genre$genre[matches]
#get master idx of each genre in community i
genre_idx = table(match(comm_genres,genre_master))
thresh = length(comm_genres)*0.2 # set 20% threshold
ps_thresh = which(genre_idx >= thresh) # which indicies occured more than 20% of the time
comm_20_genres = genre_master[as.numeric(names(ps_thresh))] # convert idx back to actual genre names
if(length(comm_20_genres) == 0){
comm_20_genres = "None greater than 20%"
}
cat('     Community', i, 'genres: ',comm_20_genres,'\n')
source('C:/Users/Steven/Desktop/EE232E_Project2/Q4.R')
source('C:/Users/Steven/Desktop/EE232E_Project2/Q2_3.R')
